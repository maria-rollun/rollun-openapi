openapi: 3.0.0
info:
  version: "1"
  title: Tasks
servers:
  - url: http://localhost/openapi/Tasks/v1/FileSummary
tags:
  - name: FileSummary
    description: 'Task that calculate file summary'
paths:
  /task:
    post:
      tags:
        - FileSummary
      summary: Create task
      operationId: runTask
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
      requestBody:
        $ref: '#/components/requestBodies/Task'
  /task/{taskId}:
    get:
      tags:
        - FileSummary
      summary: Return concreted task info by id
      operationId: getTaskInfoById
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            example: 'qwerty123'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfoResult'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
    delete:
      tags:
        - FileSummary
      summary: Delete task
      operationId: deleteById
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
            example: 'qwerty123'
      responses:
        '204':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResult'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
components:
  schemas:
    Message:
      type: object
      required:
        - level
        - message
      properties:
        level:
          type: string
          description: 'Message level  (like in a logger)'
          example: 'error'
        message:
          type: string
          description: 'Message text'
          example: 'Something wrong.'
        context:
          type: object
          description: 'Message context (like in a logger)'
    ErrorResult:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Result:
      allOf:
        - $ref: '#/components/schemas/ErrorResult'
      type: object
      properties:
        data:
          type: object
    TaskInfoResult:
      allOf:
        - $ref: '#/components/schemas/Result'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/TaskInfo'
    TaskInfo:
      type: object
      required:
        - id
        - timeout
        - stage
        - status
      properties:
        id:
          type: string
          example: 'qwerty123'
        timeout:
          type: integer
          example: '3'
        stage:
          $ref: '#/components/schemas/Stage'
        status:
          $ref: '#/components/schemas/Status'
        startTime:
          type: string
          description: 'Task start time UTC'
          example: '2020-11-20T13:14:15Z'
        result:
          $ref: '#/components/schemas/SummaryResult'
    Stage:
      type: object
      required:
        - stage
        - allStages
      properties:
        stage:
          type: string
          description: 'Current stage'
          example: 'writing 2'
        allStages:
          type: array
          description: 'All possible stages'
          items: { }
          example: [ 'writing 1','writing 2','writing 3','calc summary','done' ]
    Status:
      type: object
      required:
        - state
        - allStates
      properties:
        state:
          type: string
          description: 'Current state'
          example: 'pending'
        allStates:
          type: array
          description: 'All possible states'
          items: { }
          example: [ 'pending','fulfilled','rejected' ]
    SummaryResult:
      allOf:
        - $ref: '#/components/schemas/Result'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Summary'
    DeleteResult:
      allOf:
        - $ref: '#/components/schemas/Result'
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Delete'
    Summary:
      type: object
      required:
        - summary
      properties:
        summary:
          type: integer
          description: 'Summary'
          example: '15'
    Delete:
      type: object
      required:
        - isDeleted
      properties:
        isDeleted:
          type: boolean
          description: 'Is deleted ?'
          example: true
  requestBodies:
    Task:
      content:
        application/json:
          schema:
            type: object
            properties:
              n:
                type: integer
                description: 'N parameter'
                example: '5'
      description: Data that needs for task creating
      required: true